/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package posproject.frames;

import java.util.Random;
import javax.swing.JFrame;
import posproject.metodePembayaran.DebitCard;
import posproject.metodePembayaran.Qris;
import posproject.metodePembayaran.Tunai;
import javax.swing.JOptionPane;
import posproject.dataModel.Pulsa;
import posproject.dataModel.Token;
import posproject.helper.DataModel;
import posproject.transactionsHandler.DetailTransaksi;
import posproject.helper.PaymentStatusData;
import posproject.helper.StringGenerator;
import posproject.helper.ThrownData;
import posproject.transactionsHandler.Transaksi;


/**
 *
 * @author abby
 */

public class BayarForm extends javax.swing.JFrame {
    private String totalBelanja;
    private DetailTransaksi detailTransaksi = new DetailTransaksi();
    private Transaksi transaksi = new Transaksi();
    private DataModel datamodel = new DataModel();
    private ThrownData thrown = new ThrownData();
    private Receipt receipt = new Receipt();
    PaymentStatusData paymentStatusData = new PaymentStatusData();

    private int id_transaksi;

    public BayarForm() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        bankOption(false);
        showQrBtn.setVisible(false);
    }
    
    public void setTransaksi(Transaksi newTransaksi){
        transaksi = newTransaksi;
    }
    
    public Transaksi getTransaksi(){
        return transaksi;
    }
    
    public void setDetailTransaksi(DetailTransaksi newDetailTransaksi){
        detailTransaksi = newDetailTransaksi;
    }
    
    public DetailTransaksi getDetailTransaksi(){
        return detailTransaksi;
    }
    
    private void bankOption(boolean visibility){
        bankOptionLabel.setVisible(visibility);
        bankOptionComboBox.setVisible(visibility);
        cardNumberLabel.setVisible(visibility);
        cardNumberTextField.setVisible(visibility);
    }
    
    private String addComma(float _input){
        return String.format("%,.0f", _input);
    }
    
    private float removeComma(String _input){
        String stringInput = _input.replace(",", "");
        return Float.parseFloat(stringInput);
    }
    
    public void getTotalBelanja(String _totalBelanja){
        totalBelanja = _totalBelanja;
        totalBelanjaTextField.setText(totalBelanja);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bayar_btn = new javax.swing.JButton();
        kembalianLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        totalBelanjaTextField = new javax.swing.JLabel();
        jumlahBayarTextField = new javax.swing.JTextField();
        kembalianTextField = new javax.swing.JLabel();
        bankOptionLabel = new javax.swing.JLabel();
        bankOptionComboBox = new javax.swing.JComboBox<>();
        cardNumberLabel = new javax.swing.JLabel();
        cardNumberTextField = new javax.swing.JTextField();
        showQrBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Jumlah Bayar");

        jLabel2.setText("Metode Pembayaran");

        bayar_btn.setText("Bayar");
        bayar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bayar_btnActionPerformed(evt);
            }
        });

        kembalianLabel.setText("Kembalian");

        jLabel4.setText("Total Belanja");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tunai", "Debit/Kredit", "QRIS" }));
        jComboBox1.setToolTipText("");
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jumlahBayarTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jumlahBayarTextFieldKeyReleased(evt);
            }
        });

        bankOptionLabel.setText("Pilih Bank");

        bankOptionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BRI", "BCA", "BNI", "Jago" }));

        cardNumberLabel.setText("Nomor Kartu");

        showQrBtn.setText("Tampilkan QR");
        showQrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showQrBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(kembalianLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bayar_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kembalianTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(bankOptionLabel))
                                .addGap(51, 51, 51))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(cardNumberLabel)
                                .addGap(33, 33, 33)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jumlahBayarTextField)
                            .addComponent(totalBelanjaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bankOptionComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cardNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(showQrBtn)))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalBelanjaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jumlahBayarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showQrBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bankOptionLabel)
                    .addComponent(bankOptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cardNumberLabel)
                    .addComponent(cardNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(bayar_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kembalianLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kembalianTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bayar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bayar_btnActionPerformed
        // TODO add your handling code here:
        
        boolean paymentStatus = false;
        float totalHarga = removeComma(totalBelanjaTextField.getText());
        float totalBayar = removeComma(jumlahBayarTextField.getText());
        float kembalian = totalBayar - totalHarga;
        
        if(kembalian < 0){
            JOptionPane.showMessageDialog(null, "The amount paid is insufficient to cover the total purchase cost.");
            jumlahBayarTextField.setText("");
            return;
        }
        
        String currentItem = jComboBox1.getSelectedItem().toString();
        
        System.out.println("dari bayar form");
        System.out.println(totalHarga);
        System.out.println(totalBayar);
        System.out.println(kembalian);
        System.out.println(currentItem);
        
         receipt.setTotalBayar(totalBayar);
         receipt.setTotalBelanja(totalHarga);
         receipt.setKembalian(kembalian);
         receipt.setPaymentMethod(currentItem);

        if(currentItem.equals("QRIS")){
            System.out.println("you paid using QRIS");
            
            paymentStatus = payWithQris(
                    totalHarga,
                    totalBayar,
                    kembalian,
                    currentItem);
            
            checkPaymentStatus(paymentStatus);
            
        }
        else if(currentItem.equals("Debit/Kredit")){
            System.out.println("you paid using Debit/Kredit");
            
            // bank dan kartu
            
            String cardNumber = cardNumberTextField.getText();
            
            if(cardNumber.length() != 16){
                JOptionPane.showMessageDialog(null, "Card number length must be 16 digits");
                return;
            }
            

            paymentStatus = payWithCard(
                    totalHarga,
                    totalBayar,
                    kembalian,
                    currentItem);
            
            checkPaymentStatus(paymentStatus);

        }
        else if(currentItem.equals("Tunai")){
            System.out.println("you paid using Tunai");
            
            paymentStatus = payWithTunai(
                    totalHarga,
                    totalBayar,
                    kembalian,
                    currentItem);
            
            checkPaymentStatus(paymentStatus);
        }
                for(int i = 0; i < detailTransaksi.daftarIdBarang.size(); i++ ){
                    if(detailTransaksi.daftarIdBarang.get(i) > 137 && detailTransaksi.daftarIdBarang.get(i) < 145 ){
                        int id = detailTransaksi.daftarIdBarang.get(i);
                        float harga =  detailTransaksi.daftarHargaBarang.get(i);
                        float nominal = harga - (harga * 11/100);

                        String meteran = datamodel.getNomorMeteran();

                        Random random = new Random();
                        StringBuilder tokenCodeBuilder = new StringBuilder();

                        for (int j = 0; j < 20; j++) {
                            int randomNumber = random.nextInt(10); // Generate numbers between 0 and 9
                            tokenCodeBuilder.append(randomNumber);
                        }
                        String tokenCode = tokenCodeBuilder.toString();

                        System.out.println(id_transaksi);
                        Token token = new Token();
                        token.setId_item(id);
                        token.setHarga(harga);
                        token.setNominal(nominal);
                        token.setTokenCode(tokenCode);
                        token.setNoMeteran(meteran);
                        token.setId_transaksi(id_transaksi);
                        token.insertToken(token);
                        
                        receipt.setToken(token);
                        receipt.setTotalBayar(totalBayar);
                        receipt.setTotalBelanja(totalHarga);
                        receipt.setKembalian(kembalian);
                        receipt.setPaymentMethod(currentItem);

                    }
                    else if(detailTransaksi.daftarIdBarang.get(i) > 113 && detailTransaksi.daftarIdBarang.get(i) < 138 ){
                        int id = detailTransaksi.daftarIdBarang.get(i);
                        float harga =  detailTransaksi.daftarHargaBarang.get(i);
                        String noTelp = thrown.getNomorTeleponThrown();
                        String operator = thrown.getOperatorPulsaThrown();
                        String nominal = thrown.getNominalPulsaThrown();

                        System.out.println(id_transaksi);
                        Pulsa pulsa = new Pulsa();
                        pulsa.setId_item(id);
                        pulsa.setHarga(harga);
                        pulsa.setNominal(nominal);
                        pulsa.setOperator(operator);
                        pulsa.setNoTelp(noTelp);
                        pulsa.setId_transaksi(id_transaksi);
                        pulsa.insertPulsa(pulsa);
                    }

        }
    }//GEN-LAST:event_bayar_btnActionPerformed
    
    
    private void checkPaymentStatus(boolean status){
        if(status){
            JOptionPane.showMessageDialog(null, "Payment Success");
            paymentStatusData.setPaymentStatus(status);
            receipt.setIdTransaksi(id_transaksi);
            receipt.setDetailTransaksi(detailTransaksi);
            receipt.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(null, "Payment Fail");
        }
    }
    
    
    private boolean payWithQris(
            float _totalHarga,
            float _totalBayar,
            float _kembalian,
            String _paymentMethod
     )
    {
           Qris useQris = new Qris();
            
            StringGenerator stringGenerator = new StringGenerator();
            
            String randomGeneratedContent = stringGenerator.generateRandomString(242);
            
            useQris.setIDPembayaran(useQris.generateRandomTransactionID());
            
            id_transaksi = useQris.getIDPembayaran();
            
            useQris.setTotalHarga(_totalHarga);
            useQris.setTotalBayar(_totalBayar);
            useQris.setKembalian(_kembalian);
            useQris.setPaymentMethod(_paymentMethod);
            useQris.setContent(randomGeneratedContent);
            
            
            useQris.insertDataTransaksi(
                    
                    useQris.getIDPembayaran(), 
                    useQris.getTotalHarga(), 
                    useQris.getTotalBayar(), 
                    useQris.getKembalian(),
                    useQris.getPaymentMethod()
            );
            
            useQris.insertQrisDetails();
            
            
            
            detailTransaksi.setDetailTransactionID(useQris.getIDPembayaran());
            
            detailTransaksi.insertDetailTransaksi();
            
            showKembalian(_kembalian);
            
            return true;
    }
    
    
    
        private boolean payWithCard(
            float _totalHarga,
            float _totalBayar,
            float _kembalian,
            String _paymentMethod
     )
    {
            DebitCard useDebit = new DebitCard();
            useDebit.setIDPembayaran(useDebit.generateRandomTransactionID());
            id_transaksi = useDebit.getIDPembayaran();
            useDebit.setTotalHarga(_totalHarga);
            useDebit.setTotalBayar(_totalBayar);
            useDebit.setKembalian(_kembalian);
            useDebit.setPaymentMethod(_paymentMethod);
            
            
            useDebit.insertDataTransaksi(
                    
                    useDebit.getIDPembayaran(), 
                    useDebit.getTotalHarga(), 
                    useDebit.getTotalBayar(), 
                    useDebit.getKembalian(),
                    useDebit.getPaymentMethod()
            );
            
            detailTransaksi.setDetailTransactionID(useDebit.getIDPembayaran());
            
            detailTransaksi.insertDetailTransaksi();
            
            showKembalian(_kembalian);
            
            return true;
    }
    
    private boolean payWithTunai(
            float _totalHarga,
            float _totalBayar,
            float _kembalian,
            String _paymentMethod
            )
    {
        Tunai useTunai = new Tunai();
            
            useTunai.setIDPembayaran(useTunai.generateRandomTransactionID());
            id_transaksi = useTunai.getIDPembayaran();
            useTunai.setTotalHarga(_totalHarga);
            useTunai.setTotalBayar(_totalBayar);
            useTunai.setKembalian(_kembalian);
            useTunai.setPaymentMethod(_paymentMethod);
            
            
            useTunai.insertDataTransaksi(
                    
                    useTunai.getIDPembayaran(), 
                    useTunai.getTotalHarga(), 
                    useTunai.getTotalBayar(), 
                    useTunai.getKembalian(),
                    useTunai.getPaymentMethod()
            );
            
            detailTransaksi.setDetailTransactionID(useTunai.getIDPembayaran());
            
            detailTransaksi.insertDetailTransaksi();
            
            showKembalian(_kembalian);
            
            return true;
    }
    
    private void showKembalian(float input){
        kembalianTextField.setText(addComma(input));
    }
    
    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        
        String currentItem = jComboBox1.getSelectedItem().toString();
        
        if(currentItem.equals("QRIS")){
            System.out.println("you just choose QRIS");
            showQrBtn.setVisible(true);
            bankOption(false);
            String totalHarga = totalBelanjaTextField.getText();
            jumlahBayarTextField.setText(totalHarga);
            
        }
        else if(currentItem.equals("Debit/Kredit")){
            System.out.println("you just choose Debit/Kredit");
            showQrBtn.setVisible(false);
            bankOption(true);
            String totalHarga = totalBelanjaTextField.getText();
            jumlahBayarTextField.setText(totalHarga);
        }
        else if(currentItem.equals("Tunai")){
            System.out.println("you just choose Tunai");
            showQrBtn.setVisible(false);
            bankOption(false);
            jumlahBayarTextField.setText("");
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void showQrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showQrBtnActionPerformed
        // TODO add your handling code here:
        QRForm qrForm = new QRForm();
        
        qrForm.setVisible(true);
    }//GEN-LAST:event_showQrBtnActionPerformed

    private void jumlahBayarTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jumlahBayarTextFieldKeyReleased
        // TODO add your handling code here:
        
      String dibayarString = jumlahBayarTextField.getText();
      dibayarString = dibayarString.replace(",", ""); // remove commas from the string

        try {
            float dibayarInput = Float.parseFloat(dibayarString);
            jumlahBayarTextField.setText(String.format("%,.0f", dibayarInput));
        } 
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Invalid input. Please enter a number.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jumlahBayarTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BayarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BayarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BayarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BayarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BayarForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> bankOptionComboBox;
    private javax.swing.JLabel bankOptionLabel;
    private javax.swing.JButton bayar_btn;
    private javax.swing.JLabel cardNumberLabel;
    private javax.swing.JTextField cardNumberTextField;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jumlahBayarTextField;
    private javax.swing.JLabel kembalianLabel;
    private javax.swing.JLabel kembalianTextField;
    private javax.swing.JButton showQrBtn;
    private javax.swing.JLabel totalBelanjaTextField;
    // End of variables declaration//GEN-END:variables
}
